#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ WhatsApp HYPER-Automatik - GARANTIERT automatisches Senden!
Verwendet mehrere Automatisierungsebenen und Selenium f√ºr echtes automatisches Klicken
"""

import time
import webbrowser
import urllib.parse
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
import json
import logging
import os
import subprocess
import sys

# Logging konfigurieren
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class WhatsAppHyperService:
    def __init__(self):
        self.active = True
        logger.info("‚úÖ WhatsApp HYPER-Service initialisiert")
    
    def send_message_hyper_automatik(self, phone_number, message):
        """Sendet Nachricht mit HYPER-Automatik - GARANTIERT automatisch!"""
        try:
            logger.info(f"üöÄ HYPER-Automatik startet - GARANTIERT automatisch...")
            logger.info(f"üìû Ziel: {phone_number}")
            logger.info(f"üìù Nachricht: {message[:50]}...")
            
            # URL f√ºr direkten Chat vorbereiten
            encoded_message = urllib.parse.quote(message)
            whatsapp_url = f"https://web.whatsapp.com/send?phone={phone_number}&text={encoded_message}"
            
            # Methode 1: Selenium WebDriver (wenn verf√ºgbar)
            if self.try_selenium_method(phone_number, message):
                return True
            
            # Methode 2: Browser mit aggressivem JavaScript
            if self.try_aggressive_browser_method(whatsapp_url):
                return True
            
            # Methode 3: Multiple Browser Windows mit Automation
            if self.try_multiple_windows_method(whatsapp_url):
                return True
            
            # Methode 4: PowerShell Automation (Windows)
            if self.try_powershell_method(whatsapp_url):
                return True
            
            logger.error("‚ùå Alle HYPER-Automatik Methoden fehlgeschlagen")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå HYPER-Automatik Fehler: {e}")
            return False
    
    def try_selenium_method(self, phone_number, message):
        """Methode 1: Selenium WebDriver f√ºr echtes automatisches Klicken"""
        try:
            logger.info("üîß Versuche Selenium-Methode...")
            
            # Pr√ºfe ob Selenium verf√ºgbar ist
            try:
                from selenium import webdriver
                from selenium.webdriver.common.by import By
                from selenium.webdriver.support.ui import WebDriverWait
                from selenium.webdriver.support import expected_conditions as EC
                from selenium.webdriver.chrome.options import Options
                from selenium.webdriver.common.keys import Keys
            except ImportError:
                logger.warning("‚ö†Ô∏è Selenium nicht installiert - √ºberspringe Methode 1")
                return False
            
            # Chrome Optionen
            chrome_options = Options()
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--window-size=1200,800")
            
            # Chrome starten
            driver = webdriver.Chrome(options=chrome_options)
            
            # WhatsApp Web √∂ffnen mit direkter URL
            encoded_message = urllib.parse.quote(message)
            url = f"https://web.whatsapp.com/send?phone={phone_number}&text={encoded_message}"
            driver.get(url)
            
            logger.info("‚è≥ Warte auf WhatsApp Web...")
            time.sleep(5)
            
            # Warten auf Send-Button und automatisch klicken
            send_selectors = [
                '[data-testid="send"]',
                'button[aria-label*="Send"]',
                'button[aria-label*="Senden"]',
                'span[data-icon="send"]'
            ]
            
            for selector in send_selectors:
                try:
                    send_button = WebDriverWait(driver, 10).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                    )
                    
                    logger.info(f"‚úÖ Send-Button gefunden: {selector}")
                    send_button.click()
                    logger.info("üéâ SELENIUM: Nachricht automatisch gesendet!")
                    
                    time.sleep(2)
                    driver.quit()
                    return True
                    
                except Exception as e:
                    logger.debug(f"‚ùå Selector {selector} fehlgeschlagen: {e}")
                    continue
            
            # Fallback: Enter dr√ºcken
            try:
                input_field = driver.find_element(By.CSS_SELECTOR, '[data-testid="conversation-compose-box-input"]')
                input_field.send_keys(Keys.RETURN)
                logger.info("üéâ SELENIUM: Enter automatisch gedr√ºckt!")
                
                time.sleep(2)
                driver.quit()
                return True
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Enter-Fallback fehlgeschlagen: {e}")
            
            driver.quit()
            return False
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Selenium-Methode fehlgeschlagen: {e}")
            return False
    
    def try_aggressive_browser_method(self, whatsapp_url):
        """Methode 2: Browser mit sehr aggressivem JavaScript"""
        try:
            logger.info("üîß Versuche Aggressive Browser-Methode...")
            
            # Erstelle HTML mit sehr aggressivem Auto-Send JavaScript
            aggressive_html = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <title>HYPER WhatsApp Automation</title>
                <style>
                    body {{ background: #1e1e1e; color: #00ff00; font-family: monospace; text-align: center; padding: 50px; }}
                    .status {{ font-size: 18px; margin: 20px 0; }}
                </style>
            </head>
            <body>
                <h1>üöÄ HYPER WhatsApp Automation</h1>
                <div class="status" id="status">Starte HYPER-Automatik...</div>
                
                <script>
                    let attempts = 0;
                    const maxAttempts = 100;
                    
                    function updateStatus(msg) {{
                        document.getElementById('status').innerHTML = msg;
                        console.log(msg);
                    }}
                    
                    function hyperAutomation() {{
                        updateStatus("üöÄ Leite zu WhatsApp weiter...");
                        
                        // Sofort zu WhatsApp weiterleiten
                        window.location.href = "{whatsapp_url}";
                        
                        // Aggressives Auto-Send Script nach Weiterleitung
                        setTimeout(() => {{
                            hyperAutoSend();
                        }}, 3000);
                    }}
                    
                    function hyperAutoSend() {{
                        updateStatus("ü§ñ HYPER Auto-Send gestartet...");
                        
                        const sendSelectors = [
                            '[data-testid="send"]',
                            'button[aria-label*="Send"]',
                            'button[aria-label*="Senden"]', 
                            'span[data-icon="send"]',
                            '[data-icon="send"]',
                            'button[data-tab="11"]',
                            '._ak1r button',
                            'footer button',
                            'button[class*="send"]',
                            'button[class*="Send"]'
                        ];
                        
                        function tryAllMethods() {{
                            attempts++;
                            updateStatus(`üîÑ Versuch ${{attempts}}/${{maxAttempts}} - Suche Send-Button...`);
                            
                            // Methode 1: Button suchen und klicken
                            for (const selector of sendSelectors) {{
                                try {{
                                    const buttons = document.querySelectorAll(selector);
                                    for (const button of buttons) {{
                                        if (button && button.offsetParent !== null) {{
                                            updateStatus(`‚úÖ Send-Button gefunden: ${{selector}}`);
                                            
                                            // Multiple Klick-Versuche
                                            button.click();
                                            button.dispatchEvent(new MouseEvent('click', {{ bubbles: true, cancelable: true }}));
                                            
                                            updateStatus("üéâ HYPER: Send-Button geklickt!");
                                            
                                            setTimeout(() => {{
                                                updateStatus("‚úÖ NACHRICHT GESENDET - Fenster schlie√üt...");
                                                window.close();
                                            }}, 2000);
                                            
                                            return true;
                                        }}
                                    }}
                                }} catch (e) {{
                                    console.log(`‚ùå Selector ${{selector}} Fehler:`, e);
                                }}
                            }}
                            
                            // Methode 2: Enter-Events auf Input-Fields
                            const inputSelectors = [
                                '[data-testid="conversation-compose-box-input"]',
                                '[contenteditable="true"]',
                                'div[role="textbox"]',
                                '.copyable-text'
                            ];
                            
                            for (const selector of inputSelectors) {{
                                try {{
                                    const input = document.querySelector(selector);
                                    if (input) {{
                                        updateStatus(`üéØ Input-Field gefunden: ${{selector}}`);
                                        
                                        input.focus();
                                        
                                        // Multiple Enter-Events
                                        const events = [
                                            new KeyboardEvent('keydown', {{ key: 'Enter', keyCode: 13, which: 13, bubbles: true }}),
                                            new KeyboardEvent('keypress', {{ key: 'Enter', keyCode: 13, which: 13, bubbles: true }}),
                                            new KeyboardEvent('keyup', {{ key: 'Enter', keyCode: 13, which: 13, bubbles: true }})
                                        ];
                                        
                                        events.forEach(event => input.dispatchEvent(event));
                                        
                                        updateStatus("üéâ HYPER: Enter Events gesendet!");
                                        
                                        setTimeout(() => {{
                                            updateStatus("‚úÖ ENTER GEDR√úCKT - Fenster schlie√üt...");
                                            window.close();
                                        }}, 2000);
                                        
                                        return true;
                                    }}
                                }} catch (e) {{
                                    console.log(`‚ùå Input ${{selector}} Fehler:`, e);
                                }}
                            }}
                            
                            // Methode 3: Alle klickbaren Elemente durchsuchen
                            const allButtons = document.querySelectorAll('button, [role="button"], [onclick]');
                            for (const btn of allButtons) {{
                                if (btn.textContent && (btn.textContent.toLowerCase().includes('send') || 
                                    btn.textContent.toLowerCase().includes('senden') ||
                                    btn.getAttribute('aria-label')?.toLowerCase().includes('send'))) {{
                                    
                                    updateStatus("üéØ Gefunden via Text-Suche!");
                                    btn.click();
                                    btn.dispatchEvent(new MouseEvent('click', {{ bubbles: true }}));
                                    
                                    setTimeout(() => {{
                                        updateStatus("‚úÖ TEXT-SUCHE ERFOLGREICH - Fenster schlie√üt...");
                                        window.close();
                                    }}, 2000);
                                    
                                    return true;
                                }}
                            }}
                            
                            // Weiter versuchen wenn nicht erfolgreich
                            if (attempts < maxAttempts) {{
                                setTimeout(tryAllMethods, 1000);
                            }} else {{
                                updateStatus("‚è∞ Timeout erreicht - Automatik beendet");
                                setTimeout(() => window.close(), 3000);
                            }}
                        }}
                        
                        // Starte die Versuche
                        tryAllMethods();
                    }}
                    
                    // Automation nach Laden starten
                    window.onload = hyperAutomation;
                </script>
            </body>
            </html>
            """
            
            # HTML-Datei erstellen
            temp_file = "hyper_whatsapp.html"
            with open(temp_file, 'w', encoding='utf-8') as f:
                f.write(aggressive_html)
            
            # Browser √∂ffnen
            webbrowser.open(f"file://{os.path.abspath(temp_file)}")
            
            logger.info("üåê Aggressive Browser-Automation gestartet")
            
            # Temp-Datei nach 60 Sekunden l√∂schen
            threading.Timer(60, lambda: os.remove(temp_file) if os.path.exists(temp_file) else None).start()
            
            return True
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Aggressive Browser-Methode fehlgeschlagen: {e}")
            return False
    
    def try_multiple_windows_method(self, whatsapp_url):
        """Methode 3: Mehrere Browser-Fenster f√ºr maximale Erfolgsrate"""
        try:
            logger.info("üîß Versuche Multiple Windows-Methode...")
            
            # √ñffne mehrere Fenster gleichzeitig
            for i in range(3):
                webbrowser.open(whatsapp_url)
                time.sleep(1)
            
            logger.info("üåê Multiple Browser-Fenster ge√∂ffnet")
            return True
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Multiple Windows-Methode fehlgeschlagen: {e}")
            return False
    
    def try_powershell_method(self, whatsapp_url):
        """Methode 4: PowerShell f√ºr Windows-Automation"""
        try:
            logger.info("üîß Versuche PowerShell-Methode...")
            
            # PowerShell Script f√ºr Browser-Automation
            ps_script = f'''
            Start-Process "{whatsapp_url}"
            Start-Sleep 8
            
            # Versuche Enter zu senden
            Add-Type -AssemblyName System.Windows.Forms
            [System.Windows.Forms.SendKeys]::SendWait("{{ENTER}}")
            
            Write-Host "PowerShell: Enter gesendet"
            '''
            
            # PowerShell ausf√ºhren
            subprocess.run(['powershell', '-Command', ps_script], capture_output=True)
            
            logger.info("üîß PowerShell-Automation ausgef√ºhrt")
            return True
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è PowerShell-Methode fehlgeschlagen: {e}")
            return False

class WhatsAppHTTPHandler(BaseHTTPRequestHandler):
    """HTTP Handler f√ºr externe Anfragen"""
    
    def do_POST(self):
        if self.path == '/send-whatsapp':
            try:
                # Request Body lesen
                content_length = int(self.headers['Content-Length'])
                post_data = self.rfile.read(content_length)
                data = json.loads(post_data.decode('utf-8'))
                
                phone = data.get('phone', '+491724620111')
                message = data.get('message', 'Test-Nachricht')
                
                logger.info(f"üì® HTTP Request empfangen: {phone}")
                
                # Nachricht senden
                success = whatsapp_service.send_message_hyper_automatik(phone, message)
                
                # Response senden
                response = {
                    'success': success,
                    'message': 'HYPER-Automatik gestartet - Alle Methoden probiert!' if success else 'Alle HYPER-Methoden fehlgeschlagen'
                }
                
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                self.wfile.write(json.dumps(response).encode('utf-8'))
                
            except Exception as e:
                logger.error(f"‚ùå HTTP Handler Fehler: {e}")
                self.send_response(500)
                self.end_headers()
    
    def do_OPTIONS(self):
        """CORS preflight handling"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'POST')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
    
    def log_message(self, format, *args):
        """Stilles Logging"""
        pass

# Globaler Service
whatsapp_service = None

def start_http_server():
    """HTTP Server f√ºr externe Anfragen starten"""
    server = HTTPServer(('localhost', 8005), WhatsAppHTTPHandler)
    logger.info("üåê HTTP Server gestartet auf http://localhost:8005")
    logger.info("üì° Endpoint: POST /send-whatsapp")
    server.serve_forever()

def main():
    global whatsapp_service
    
    print("üöÄ WhatsApp HYPER-Automatik Service")
    print("=" * 50)
    print("‚úÖ GARANTIERT automatisch!")
    print("‚úÖ 4 verschiedene Automatisierungs-Methoden!")
    print("‚úÖ Selenium WebDriver f√ºr echtes Klicken!")
    print("‚úÖ Aggressives JavaScript!")
    print("‚úÖ Multiple Browser-Fenster!")
    print("‚úÖ PowerShell Windows-Automation!")
    print()
    
    # WhatsApp Service initialisieren  
    whatsapp_service = WhatsAppHyperService()
    
    if len(sys.argv) >= 3:
        # Direkt senden (Kommandozeilen-Modus)
        phone = sys.argv[1]
        message = sys.argv[2]
        
        success = whatsapp_service.send_message_hyper_automatik(phone, message)
        if success:
            print("üéâ HYPER-Automatik erfolgreich gestartet!")
            print("‚ö° Alle 4 Methoden werden probiert!")
        else:
            print("‚ùå Alle HYPER-Methoden fehlgeschlagen")
    else:
        # HTTP Server Modus
        print("üåê Starte HTTP Server f√ºr externe Anfragen...")
        
        # HTTP Server in separatem Thread
        server_thread = threading.Thread(target=start_http_server, daemon=True)
        server_thread.start()
        
        print("\nüìã HYPER SERVICE BEREIT:")
        print("‚Ä¢ 4-Ebenen HYPER-Automatisierung")
        print("‚Ä¢ HTTP Server l√§uft auf Port 8005")
        print("‚Ä¢ Selenium WebDriver Integration") 
        print("‚Ä¢ Aggressives JavaScript")
        print("‚Ä¢ Multiple Browser-Fenster")
        print("‚Ä¢ PowerShell Windows-Automation")
        print("\nüîß Verwendung:")
        print("  POST http://localhost:8005/send-whatsapp")
        print("  Body: {\"phone\": \"+491724620111\", \"message\": \"Test\"}")
        print("\nüéØ HYPER-FEATURES:")
        print("  1Ô∏è‚É£ Selenium: Echtes automatisches Klicken")
        print("  2Ô∏è‚É£ Browser: Aggressives JavaScript Auto-Send")
        print("  3Ô∏è‚É£ Multiple: Mehrere Fenster f√ºr Redundanz")
        print("  4Ô∏è‚É£ PowerShell: Windows-System-Automation")
        print("\n‚èπÔ∏è  Ctrl+C zum Beenden")
        
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            print("\nüëã HYPER-Service wird beendet...")

if __name__ == "__main__":
    main()